/*
 * Define modules options
 */


process {

  // Default
  publishDir = [
    path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
    mode: 'copy',
    saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  ]

  withName:'deeptoolsBamCoverage' {
    publishDir = [
      path: { "${params.outDir}/bigwig" },
      mode: 'copy',
      pattern: "*.bigwig",
    ]
    ext.args = '--normalizeUsing CPM --skipNonCoveredRegions'
  }

  withName:'dupradar' {
    publishDir = [
      [
        path: { "${params.outDir}/dupradar/scatterPlot" },
        mode: 'copy',
        pattern: "*Dens.pdf"
      ],
      [
        path: { "${params.outDir}/dupradar/boxPlot" },
        mode: 'copy',
        pattern: "*Boxplot.pdf"
      ],
      [
        path: { "${params.outDir}/dupradar/histogram" },
        mode: 'copy',
        pattern: "*Hist.pdf"
      ],
      [
        path: { "${params.outDir}/dupradar/geneData" },
        mode: 'copy',
        pattern: "*Matrix.txt"
      ],
      [
        path: { "${params.outDir}/dupradar/interceptsSlope" },
        mode: 'copy',
        pattern: "*slope.txt"
      ]
    ]
  }

  withName:'fastqc' {
    publishDir = [
      [
        path: { "${params.outDir}/fastqc/zips/" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/fastqc" },
	mode: "copy",
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.when = !params.skipQC && !params.skipFastqc
  }

  withName:'featureCounts' {
    publishDir = [
      [
        path: { "${params.outDir}/counts/summaries" },
        mode: 'copy',
        pattern: "*summary"
      ],
      [
        path: { "${params.outDir}/counts/" },
        mode: 'copy',
        pattern: "*counts.csv"
      ]
    ]
    ext.args = params.featurecountsOpts ?: ''
  }

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.outDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'hisat2Align' {
    publishDir = [
      [
        path: { "${params.outDir}/mapping/" },
        mode: 'copy',
        pattern: "*.bam",
        enabled: params.saveIntermediates
      ],
      [
        path: { "${params.outDir}/mapping/logs" },
	mode: 'copy',
	pattern: '*summary.txt',
        enabled: params.saveIntermediates
      ]
    ]
    ext.args = params.hisat2Opts ?: ''
  }

  withName:'htseqCounts' {
    publishDir = [
      [
        path: { "${params.outDir}/counts/summaries" },
        mode: 'copy',
        pattern: "*summary"
      ],
      [
        path: { "${params.outDir}/counts/" },
        mode: 'copy',
        pattern: "*{HTseqCounts.txt,counts.csv}"
      ]
    ]
    ext.args = params.htseqOpts ?: ''
  }

  withName:'identitoPolym' {
    publishDir = [
      path: {"${params.outDir}/identito/"},
      enabled: false 
    ]
  }

  withName:'identitoCombine' {
    publishDir = [
      path: { "${params.outDir}/identito" },
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      mode: 'copy'
    ]
  }

  withName:'makeHisatSplicesites' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      pattern: "*.hisat2SpliceSites.txt",
      enabled: params.saveIntermediates
    ]
  }

  withName:'markDuplicates' {
    publishDir = [
      [
        path: { "${params.outDir}/markDuplicates" },
        mode: 'copy',
        pattern: "*markDups.bam",
        enabled: params.saveIntermediates
      ],
      [
        path: { "${params.outDir}/markDuplicates/metrics" },
        mode: 'copy',
        pattern: '*metrics.txt'
      ]
    ]
    ext.args = params.tmpDir ? "-Djava.io.tmpdir=${params.tmpDir}" : ''
  }

  withName:'mergeCounts' {
    publishDir = [
      path: { "${params.outDir}/counts/" },
      mode: 'copy',
      pattern: '*.csv'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }

  withName:'preseq' {
    ext.args = '-e 200e+06 -seg_len 100000000'
  }

  withName:'rRNAMapping' {
    publishDir = [
      [
        path: { "${params.outDir}/rRNAmapping" },
        mode: 'copy',
        pattern: "*fastq.gz",
        enabled: params.saveIntermediates
      ],
      [
        path: { "${params.outDir}/rRNAmapping/logs" },
        mode: 'copy',
	pattern: "*.log"
      ]
    ]
    ext.args = params.bowtieOpts ?: ''
  }

  withName:'rseqc' {
    publishDir = [
      path: { "${params.outDir}/strandness" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      pattern: "*.txt"
    ]
  }

  withName:'strandnessFlow:bowtie2' {
    publishDir = [
     path: "${params.outDir}/strandness",
     enabled: false 
    ]
    ext.args = params.nCheck ? "-u ${params.nCheck}" : ''
  }

  withName:'salmonQuantFromBam' {
    publishDir = [
      path: { "${params.outDir}/counts" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = [
      params.salmonQuantOpts ?: '',
      params.genome && params.genomes.containsKey(params.genome) ? params.genomes[ params.genome ].gencode ? '--gencode' : '' : ''
    ].join(' ').trim()
  }

  withName:'salmonQuantFromFastq' {
    publishDir = [
      path: { "${params.outDir}/pseudoCounts" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = params.salmonQuantOpts ?: ''
   }


  withName:'salmonTx2gene|salmonTxImport' {
    publishDir = [
      path: { "${params.outDir}/counts" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName:'saveStrandness' {
    publishDir = [
      path: { "${params.outDir}/strandness" },
      mode: 'copy'
    ]
  }

  withName:'scallop' {
    publishDir = [
      path: { "${params.outDir}/scallop" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = params.scallopOpts ?: ''
  }

  withName:'stringtie|stringtieMerge' {
    publishDir = [
      path: { "${params.outDir}/stringtie" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = params.stringtieOpts ?: ''
  }

  if (['stringtie'].contains(params.denovo)){
    withName:'stringtieFlow:gffcompare' {
      ext.prefix = "stringtieMerge"
    }
  }

  withName: 'samtoolsSort' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.args = params.sortMaxMemory ? "-m ${params.sortMaxMemory}" : ''
  }

  if (!params.pseudoAligner){
    withName: '.*mapping.*Flow:samtoolsIndex' {
      publishDir = [
        path: { "${params.outDir}/mapping" },
        mode: 'copy',
        pattern: '*.bai'
      ]
    }

    withName: '.*markdupFlow:samtoolsIndex' {
      publishDir = [
        path: { "${params.outDir}/markdup" },
        mode: 'copy',
        pattern: '*.bai',
        enabled: params.saveIntermediates
      ]
    }
  }

  withName: 'samtoolsFlagstat' {
    publishDir = [
      path: {"$params.outDir/mapping"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName: 'starAlign' {
    publishDir = [
      [
        path: { "${params.outDir}/mapping" },
        mode: 'copy',
        pattern: "*.bam",
        enabled: params.saveIntermediates
      ],
      [
        path: { "${params.outDir}/mapping" },
        mode: 'copy',
        saveAs: {filename -> "logs/$filename"},
        pattern: "*out"
      ],
      [
        path: { "${params.outDir}/counts" },
        mode: 'copy',
        pattern: "*ReadsPerGene.out.tab",
        enabled: params.counts == 'star'
      ]
    ]
    ext.args = {[
      params.starTwoPass ? '--twopassMode Basic' : '',
      params.counts == 'star' ? '--quantMode GeneCounts' : '',
      params.counts == 'salmon' ? '--quantMode TranscriptomeSAM --quantTranscriptomeBan Singleend' : '',
      params.starOpts ?: params.genome && params.genomes.containsKey(params.genome) ? params.genomes[ params.genome ].starOpts ?: params.starDefaultOpts : ''
    ].join(' ').trim()}
  }

  withName: 'trimGalore' {
    publishDir = [
      [
        path: { "${params.outDir}/trimming" },
        mode: 'copy',
        pattern: "*fastq.gz",
        enabled: params.saveIntermediates
      ],
      [
        path: { "${params.outDir}/trimming/logs" },
        mode: 'copy',
        pattern: "*trimming_report.txt"
      ]
    ]
    ext.when = params.trimming
    ext.args = params.trimmingOpts ?: ''
  }

  withName:'xengsort' {
    publishDir = [
      [
        path: { "${params.outDir}/xengsort" },
        mode: 'copy',
        pattern: '*fastq.gz'
      ],
      [
        path: { "${params.outDir}/xengsort/logs" },
        mode: 'copy',
        pattern: '*.log'
      ]
    ]
    ext.when = params.pdx
  }

}