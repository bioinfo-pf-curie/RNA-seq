def checkProfileMultipath(path){
  File directory = new File(path)
  def contents = []
  directory.eachFileRecurse (groovy.io.FileType.FILES) { file -> contents << file }
  if (!path?.trim() || contents == null || contents.size() == 0){
     println "   ### ERROR ###   The option '-profile multipath' requires the configuration of each tool path. See `--globalPath` for advanced usage."
     System.exit(-1)
  }
}

singularity {
  enable = false
}

docker {
  enable = false
}

process {
  checkProfileMultipath(${params.geniac.multiPath})
  withLabel:python { beforeScript = "export PATH=${params.multiPath}/python/bin:$PATH" }
  withLabel:fastqc { beforeScript = "export PATH=${params.multiPath}/fastqc/bin:$PATH" }
  withLabel:bowtie { beforeScript = "export PATH=${params.multiPath}/bowtie/bin:$PATH" }
  withLabel:bowtie2 { beforeScript = "export PATH=${params.multiPath}/bowtie2/bin:$PATH" }
  withLabel:star { beforeScript = "export PATH=${params.multiPath}/star/bin:$PATH" }
  withLabel:hisat2 { beforeScript = "export PATH=${params.multiPath}/hisat2/bin:$PATH" }
  withLabel:samtools { beforeScript = "export PATH=${params.multiPath}/samtools/bin:$PATH" }
  withLabel:rseqc { beforeScript = "export PATH=${params.multiPath}/rseqc/bin:$PATH" }
  withLabel:picard { beforeScript = "export PATH=${params.multiPath}/picard/bin:$PATH" }
  withLabel:preseq { beforeScript = "export PATH=${params.multiPath}/preseq/bin:$PATH" }
  withLabel:r { beforeScript = "export PATH=${params.multiPath}/r/bin:$PATH" }
  withLabel:dupradar { beforeScript = "export PATH=${params.multiPath}/dupradar/bin:$PATH" }
  withLabel:featurecounts { beforeScript = "export PATH=${params.multiPath}/featurecounts/bin:$PATH" }
  withLabel:htseq { beforeScript = "export PATH=${params.multiPath}/htseq/bin:$PATH" }
  withLabel:unix { beforeScript = "export PATH=${params.multiPath}/unix/bin:$PATH" }
  withLabel:multiqc { beforeScript = "export PATH=${params.multiPath}/multiqc/bin:$PATH" }
}

