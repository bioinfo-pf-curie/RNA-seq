def checkProfileSingularity(path){
  if (new File(path).exists()){
    File directory = new File(path)
    def contents = []
    directory.eachFileRecurse (groovy.io.FileType.FILES) { file -> contents << file }
    if (!path?.trim() || contents == null || contents.size() == 0){
      println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
      System.exit(-1)
    }
  }else{
    println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
    System.exit(-1)
  }
}

singularity {
  enable = true
  autoMounts = true
  runOptions = "${params.singularityRunOptions}"
}

process {
  withLabel:python { container = "${params.geniac.containers.singularityImagePath}/python.simg" }
  withLabel:fastqc { container = "${params.geniac.containers.singularityImagePath}/fastqc.simg" }
  withLabel:bowtie { container = "${params.geniac.containers.singularityImagePath}/bowtie.simg" }
  withLabel:bowtie2 { container = "${params.geniac.containers.singularityImagePath}/bowtie2.simg" }
  withLabel:star { container = "${params.geniac.containers.singularityImagePath}/star.simg" }
  withLabel:hisat2 { container = "${params.geniac.containers.singularityImagePath}/hisat2.simg" }
  withLabel:samtools { container = "${params.geniac.containers.singularityImagePath}/samtools.simg" }
  withLabel:rseqc { container = "${params.geniac.containers.singularityImagePath}/rseqc.simg" }
  withLabel:picard { container = "${params.geniac.containers.singularityImagePath}/picard.simg" }
  withLabel:preseq { container = "${params.geniac.containers.singularityImagePath}/preseq.simg" }
  withLabel:r { container = "${params.geniac.containers.singularityImagePath}/rnaseqr.simg" }
  withLabel:dupradar { container = "${params.geniac.containers.singularityImagePath}/dupradar.simg" }
  withLabel:featurecounts { container = "${params.geniac.containers.singularityImagePath}/featurecounts.simg" }
  withLabel:htseq { container = "${params.geniac.containers.singularityImagePath}/htseq.simg" }
  withLabel:unix { container = "${params.geniac.containers.singularityImagePath}/unix.simg" }
  withLabel:multiqc { container = "${params.geniac.containers.singularityImagePath}/multiqc.simg" }
}

